// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: protobuf/requests.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidderCode string   `protobuf:"bytes,1,opt,name=bidderCode,proto3" json:"bidderCode,omitempty"`
	State      string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Cpm        float32  `protobuf:"fixed32,3,opt,name=cpm,proto3" json:"cpm,omitempty"`
	Size       string   `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Elapsed    uint32   `protobuf:"varint,5,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	BidId      string   `protobuf:"bytes,6,opt,name=bidId,proto3" json:"bidId,omitempty"` // for join with impression
	Tags       []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Currency   string   `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *BidRequest) Reset() {
	*x = BidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_requests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest) ProtoMessage() {}

func (x *BidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_requests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest.ProtoReflect.Descriptor instead.
func (*BidRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_requests_proto_rawDescGZIP(), []int{0}
}

func (x *BidRequest) GetBidderCode() string {
	if x != nil {
		return x.BidderCode
	}
	return ""
}

func (x *BidRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BidRequest) GetCpm() float32 {
	if x != nil {
		return x.Cpm
	}
	return 0
}

func (x *BidRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *BidRequest) GetElapsed() uint32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *BidRequest) GetBidId() string {
	if x != nil {
		return x.BidId
	}
	return ""
}

func (x *BidRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BidRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Auction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionTime uint64 `protobuf:"varint,1,opt,name=ingestionTime,proto3" json:"ingestionTime,omitempty"`
	ScopeId       string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	TagId         string `protobuf:"bytes,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	AdUnit        string `protobuf:"bytes,4,opt,name=adUnit,proto3" json:"adUnit,omitempty"`
	Device        string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Country       string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Domain        string `protobuf:"bytes,7,opt,name=domain,proto3" json:"domain,omitempty"`
	// deduplication an join
	TransactionId string `protobuf:"bytes,8,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	AuctionId     string `protobuf:"bytes,9,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	// bid objects
	BidRequests []*BidRequest `protobuf:"bytes,10,rep,name=bidRequests,proto3" json:"bidRequests,omitempty"`
	// indicate the iteration of the refresh
	Refresh bool `protobuf:"varint,11,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// ex [ "refresh:3" ]
	Tags []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	// debug fields
	BrowserName    string `protobuf:"bytes,13,opt,name=browserName,proto3" json:"browserName,omitempty"`
	BrowserVersion string `protobuf:"bytes,14,opt,name=browserVersion,proto3" json:"browserVersion,omitempty"`
	OsName         string `protobuf:"bytes,15,opt,name=osName,proto3" json:"osName,omitempty"`
	OsVersion      string `protobuf:"bytes,16,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	// extended model fields
	Href               string   `protobuf:"bytes,17,opt,name=href,proto3" json:"href,omitempty"`
	Sizes              []string `protobuf:"bytes,18,rep,name=sizes,proto3" json:"sizes,omitempty"`
	UserConsentState   string   `protobuf:"bytes,19,opt,name=userConsentState,proto3" json:"userConsentState,omitempty"`
	UserConsentVersion string   `protobuf:"bytes,20,opt,name=userConsentVersion,proto3" json:"userConsentVersion,omitempty"`
	PbjsVersion        string   `protobuf:"bytes,21,opt,name=pbjsVersion,proto3" json:"pbjsVersion,omitempty"`
	PbstckVersion      string   `protobuf:"bytes,22,opt,name=pbstckVersion,proto3" json:"pbstckVersion,omitempty"`
	AdUnitPath         string   `protobuf:"bytes,23,opt,name=adUnitPath,proto3" json:"adUnitPath,omitempty"`
	HasUserId          string   `protobuf:"bytes,24,opt,name=hasUserId,proto3" json:"hasUserId,omitempty"`
	UserIdProviderList []string `protobuf:"bytes,25,rep,name=userIdProviderList,proto3" json:"userIdProviderList,omitempty"`
	PubstackManaged    bool     `protobuf:"varint,26,opt,name=pubstackManaged,proto3" json:"pubstackManaged,omitempty"`
	PubstackRefresh    bool     `protobuf:"varint,27,opt,name=pubstackRefresh,proto3" json:"pubstackRefresh,omitempty"`
}

func (x *Auction) Reset() {
	*x = Auction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_requests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auction) ProtoMessage() {}

func (x *Auction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_requests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auction.ProtoReflect.Descriptor instead.
func (*Auction) Descriptor() ([]byte, []int) {
	return file_protobuf_requests_proto_rawDescGZIP(), []int{1}
}

func (x *Auction) GetIngestionTime() uint64 {
	if x != nil {
		return x.IngestionTime
	}
	return 0
}

func (x *Auction) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *Auction) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *Auction) GetAdUnit() string {
	if x != nil {
		return x.AdUnit
	}
	return ""
}

func (x *Auction) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Auction) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Auction) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Auction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Auction) GetAuctionId() string {
	if x != nil {
		return x.AuctionId
	}
	return ""
}

func (x *Auction) GetBidRequests() []*BidRequest {
	if x != nil {
		return x.BidRequests
	}
	return nil
}

func (x *Auction) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *Auction) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Auction) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *Auction) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *Auction) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *Auction) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Auction) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Auction) GetSizes() []string {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *Auction) GetUserConsentState() string {
	if x != nil {
		return x.UserConsentState
	}
	return ""
}

func (x *Auction) GetUserConsentVersion() string {
	if x != nil {
		return x.UserConsentVersion
	}
	return ""
}

func (x *Auction) GetPbjsVersion() string {
	if x != nil {
		return x.PbjsVersion
	}
	return ""
}

func (x *Auction) GetPbstckVersion() string {
	if x != nil {
		return x.PbstckVersion
	}
	return ""
}

func (x *Auction) GetAdUnitPath() string {
	if x != nil {
		return x.AdUnitPath
	}
	return ""
}

func (x *Auction) GetHasUserId() string {
	if x != nil {
		return x.HasUserId
	}
	return ""
}

func (x *Auction) GetUserIdProviderList() []string {
	if x != nil {
		return x.UserIdProviderList
	}
	return nil
}

func (x *Auction) GetPubstackManaged() bool {
	if x != nil {
		return x.PubstackManaged
	}
	return false
}

func (x *Auction) GetPubstackRefresh() bool {
	if x != nil {
		return x.PubstackRefresh
	}
	return false
}

type Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionTime uint64 `protobuf:"varint,1,opt,name=ingestionTime,proto3" json:"ingestionTime,omitempty"`
	ScopeId       string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	TagId         string `protobuf:"bytes,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	AdUnit        string `protobuf:"bytes,4,opt,name=adUnit,proto3" json:"adUnit,omitempty"`
	Device        string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Country       string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Domain        string `protobuf:"bytes,7,opt,name=domain,proto3" json:"domain,omitempty"`
	// deduplication an join
	TransactionId string `protobuf:"bytes,8,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	AuctionId     string `protobuf:"bytes,9,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	// auction results
	Cpm        float32 `protobuf:"fixed32,10,opt,name=cpm,proto3" json:"cpm,omitempty"`
	Size       string  `protobuf:"bytes,11,opt,name=size,proto3" json:"size,omitempty"`
	BidderCode string  `protobuf:"bytes,12,opt,name=bidderCode,proto3" json:"bidderCode,omitempty"`
	// indicate the iteration of the refresh
	Refresh bool `protobuf:"varint,13,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// ex [ "refresh:3" ]
	Tags []string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// for join with bids and deduplication
	BidId string `protobuf:"bytes,15,opt,name=bidId,proto3" json:"bidId,omitempty"`
	// debug fields
	BrowserName    string `protobuf:"bytes,16,opt,name=browserName,proto3" json:"browserName,omitempty"`
	BrowserVersion string `protobuf:"bytes,17,opt,name=browserVersion,proto3" json:"browserVersion,omitempty"`
	OsName         string `protobuf:"bytes,18,opt,name=osName,proto3" json:"osName,omitempty"`
	OsVersion      string `protobuf:"bytes,19,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	// extended model fields
	Href                  string   `protobuf:"bytes,20,opt,name=href,proto3" json:"href,omitempty"`
	UserConsentState      string   `protobuf:"bytes,21,opt,name=userConsentState,proto3" json:"userConsentState,omitempty"`
	UserConsentVersion    string   `protobuf:"bytes,22,opt,name=userConsentVersion,proto3" json:"userConsentVersion,omitempty"`
	PbjsVersion           string   `protobuf:"bytes,23,opt,name=pbjsVersion,proto3" json:"pbjsVersion,omitempty"`
	PbstckVersion         string   `protobuf:"bytes,24,opt,name=pbstckVersion,proto3" json:"pbstckVersion,omitempty"`
	AdUnitPath            string   `protobuf:"bytes,25,opt,name=adUnitPath,proto3" json:"adUnitPath,omitempty"`
	HasUserId             string   `protobuf:"bytes,26,opt,name=hasUserId,proto3" json:"hasUserId,omitempty"`
	UserIdProviderList    []string `protobuf:"bytes,27,rep,name=userIdProviderList,proto3" json:"userIdProviderList,omitempty"`
	ViewabilityMeasurable bool     `protobuf:"varint,28,opt,name=viewabilityMeasurable,proto3" json:"viewabilityMeasurable,omitempty"`
	PubstackManaged       bool     `protobuf:"varint,29,opt,name=pubstackManaged,proto3" json:"pubstackManaged,omitempty"`
	PubstackRefresh       bool     `protobuf:"varint,30,opt,name=pubstackRefresh,proto3" json:"pubstackRefresh,omitempty"`
	Currency              string   `protobuf:"bytes,31,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Impression) Reset() {
	*x = Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_requests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impression) ProtoMessage() {}

func (x *Impression) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_requests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impression.ProtoReflect.Descriptor instead.
func (*Impression) Descriptor() ([]byte, []int) {
	return file_protobuf_requests_proto_rawDescGZIP(), []int{2}
}

func (x *Impression) GetIngestionTime() uint64 {
	if x != nil {
		return x.IngestionTime
	}
	return 0
}

func (x *Impression) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *Impression) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *Impression) GetAdUnit() string {
	if x != nil {
		return x.AdUnit
	}
	return ""
}

func (x *Impression) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Impression) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Impression) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Impression) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Impression) GetAuctionId() string {
	if x != nil {
		return x.AuctionId
	}
	return ""
}

func (x *Impression) GetCpm() float32 {
	if x != nil {
		return x.Cpm
	}
	return 0
}

func (x *Impression) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Impression) GetBidderCode() string {
	if x != nil {
		return x.BidderCode
	}
	return ""
}

func (x *Impression) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *Impression) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Impression) GetBidId() string {
	if x != nil {
		return x.BidId
	}
	return ""
}

func (x *Impression) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *Impression) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *Impression) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *Impression) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Impression) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Impression) GetUserConsentState() string {
	if x != nil {
		return x.UserConsentState
	}
	return ""
}

func (x *Impression) GetUserConsentVersion() string {
	if x != nil {
		return x.UserConsentVersion
	}
	return ""
}

func (x *Impression) GetPbjsVersion() string {
	if x != nil {
		return x.PbjsVersion
	}
	return ""
}

func (x *Impression) GetPbstckVersion() string {
	if x != nil {
		return x.PbstckVersion
	}
	return ""
}

func (x *Impression) GetAdUnitPath() string {
	if x != nil {
		return x.AdUnitPath
	}
	return ""
}

func (x *Impression) GetHasUserId() string {
	if x != nil {
		return x.HasUserId
	}
	return ""
}

func (x *Impression) GetUserIdProviderList() []string {
	if x != nil {
		return x.UserIdProviderList
	}
	return nil
}

func (x *Impression) GetViewabilityMeasurable() bool {
	if x != nil {
		return x.ViewabilityMeasurable
	}
	return false
}

func (x *Impression) GetPubstackManaged() bool {
	if x != nil {
		return x.PubstackManaged
	}
	return false
}

func (x *Impression) GetPubstackRefresh() bool {
	if x != nil {
		return x.PubstackRefresh
	}
	return false
}

func (x *Impression) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type ViewableImpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context
	IngestionTime  uint64 `protobuf:"varint,1,opt,name=ingestionTime,proto3" json:"ingestionTime,omitempty"`
	ScopeId        string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	TagId          string `protobuf:"bytes,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	Country        string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Device         string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Domain         string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	BrowserName    string `protobuf:"bytes,7,opt,name=browserName,proto3" json:"browserName,omitempty"`
	BrowserVersion string `protobuf:"bytes,8,opt,name=browserVersion,proto3" json:"browserVersion,omitempty"`
	OsName         string `protobuf:"bytes,9,opt,name=osName,proto3" json:"osName,omitempty"`
	OsVersion      string `protobuf:"bytes,10,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	PbstckVersion  string `protobuf:"bytes,11,opt,name=pbstckVersion,proto3" json:"pbstckVersion,omitempty"`
	// Impression inherited fields
	BidId       string  `protobuf:"bytes,12,opt,name=bidId,proto3" json:"bidId,omitempty"`
	AuctionId   string  `protobuf:"bytes,13,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	AdUnit      string  `protobuf:"bytes,14,opt,name=adUnit,proto3" json:"adUnit,omitempty"`
	AdUnitPath  string  `protobuf:"bytes,15,opt,name=adUnitPath,proto3" json:"adUnitPath,omitempty"`
	BidderCode  string  `protobuf:"bytes,16,opt,name=bidderCode,proto3" json:"bidderCode,omitempty"`
	Cpm         float32 `protobuf:"fixed32,17,opt,name=cpm,proto3" json:"cpm,omitempty"`
	Refresh     bool    `protobuf:"varint,18,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Size        string  `protobuf:"bytes,19,opt,name=size,proto3" json:"size,omitempty"`
	PbjsVersion string  `protobuf:"bytes,20,opt,name=pbjsVersion,proto3" json:"pbjsVersion,omitempty"`
	// Viewability specific fields
	HtmlElementId string `protobuf:"bytes,21,opt,name=htmlElementId,proto3" json:"htmlElementId,omitempty"`
	MrcViewable   bool   `protobuf:"varint,22,opt,name=mrcViewable,proto3" json:"mrcViewable,omitempty"`
	Currency      string `protobuf:"bytes,23,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *ViewableImpression) Reset() {
	*x = ViewableImpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_requests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewableImpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewableImpression) ProtoMessage() {}

func (x *ViewableImpression) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_requests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewableImpression.ProtoReflect.Descriptor instead.
func (*ViewableImpression) Descriptor() ([]byte, []int) {
	return file_protobuf_requests_proto_rawDescGZIP(), []int{3}
}

func (x *ViewableImpression) GetIngestionTime() uint64 {
	if x != nil {
		return x.IngestionTime
	}
	return 0
}

func (x *ViewableImpression) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *ViewableImpression) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *ViewableImpression) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ViewableImpression) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ViewableImpression) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ViewableImpression) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *ViewableImpression) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *ViewableImpression) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *ViewableImpression) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *ViewableImpression) GetPbstckVersion() string {
	if x != nil {
		return x.PbstckVersion
	}
	return ""
}

func (x *ViewableImpression) GetBidId() string {
	if x != nil {
		return x.BidId
	}
	return ""
}

func (x *ViewableImpression) GetAuctionId() string {
	if x != nil {
		return x.AuctionId
	}
	return ""
}

func (x *ViewableImpression) GetAdUnit() string {
	if x != nil {
		return x.AdUnit
	}
	return ""
}

func (x *ViewableImpression) GetAdUnitPath() string {
	if x != nil {
		return x.AdUnitPath
	}
	return ""
}

func (x *ViewableImpression) GetBidderCode() string {
	if x != nil {
		return x.BidderCode
	}
	return ""
}

func (x *ViewableImpression) GetCpm() float32 {
	if x != nil {
		return x.Cpm
	}
	return 0
}

func (x *ViewableImpression) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *ViewableImpression) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ViewableImpression) GetPbjsVersion() string {
	if x != nil {
		return x.PbjsVersion
	}
	return ""
}

func (x *ViewableImpression) GetHtmlElementId() string {
	if x != nil {
		return x.HtmlElementId
	}
	return ""
}

func (x *ViewableImpression) GetMrcViewable() bool {
	if x != nil {
		return x.MrcViewable
	}
	return false
}

func (x *ViewableImpression) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

var File_protobuf_requests_proto protoreflect.FileDescriptor

var file_protobuf_requests_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xf8, 0x06, 0x0a, 0x07,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69,
	0x7a, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x62, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x62, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x62, 0x73, 0x74, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x62, 0x73, 0x74, 0x63, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0xde, 0x07, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x63, 0x70, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x72, 0x65, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12,
	0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x62, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x62, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x62, 0x73, 0x74, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x62, 0x73, 0x74, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xac, 0x05, 0x0a, 0x12, 0x56, 0x69, 0x65, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x62, 0x73, 0x74, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x62, 0x73, 0x74, 0x63, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x63,
	0x70, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x62, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x62, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x74, 0x6d, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x74, 0x6d, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x72, 0x63, 0x56,
	0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d,
	0x72, 0x63, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protobuf_requests_proto_rawDescOnce sync.Once
	file_protobuf_requests_proto_rawDescData = file_protobuf_requests_proto_rawDesc
)

func file_protobuf_requests_proto_rawDescGZIP() []byte {
	file_protobuf_requests_proto_rawDescOnce.Do(func() {
		file_protobuf_requests_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_requests_proto_rawDescData)
	})
	return file_protobuf_requests_proto_rawDescData
}

var file_protobuf_requests_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_protobuf_requests_proto_goTypes = []interface{}{
	(*BidRequest)(nil),         // 0: model.BidRequest
	(*Auction)(nil),            // 1: model.Auction
	(*Impression)(nil),         // 2: model.Impression
	(*ViewableImpression)(nil), // 3: model.ViewableImpression
}
var file_protobuf_requests_proto_depIdxs = []int32{
	0, // 0: model.Auction.bidRequests:type_name -> model.BidRequest
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protobuf_requests_proto_init() }
func file_protobuf_requests_proto_init() {
	if File_protobuf_requests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_requests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_requests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_requests_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_requests_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewableImpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_requests_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_requests_proto_goTypes,
		DependencyIndexes: file_protobuf_requests_proto_depIdxs,
		MessageInfos:      file_protobuf_requests_proto_msgTypes,
	}.Build()
	File_protobuf_requests_proto = out.File
	file_protobuf_requests_proto_rawDesc = nil
	file_protobuf_requests_proto_goTypes = nil
	file_protobuf_requests_proto_depIdxs = nil
}
